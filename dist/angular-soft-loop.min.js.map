{"version":3,"sources":["angular-soft-loop.min.js"],"names":["angular","ng","module","controller","$rootScope","arrayRemove","array","value","index","indexOf","splice","lastDirtyWatchNull","scopes","initialized","this","phase","init","scope","scopeDecorate","$watch","$on","length","loop","self","forEach","$$softLoopWatchers","enable","$$postDigest","disable","unshift","$softLoop","name","watcher","free","$newRegular","isolate","$new","constructor","prototype","$softLoopDigest","$$phase","$digest","$apply","apply","arguments","childScope","call","watchExp","listener","objectEquality","watcherCtrl","enabled","unwatch","$$watchers","destroy","undefined","directive","$controller","transclude","priority","terminal","restrict","compile","element","attrs","$scope","softLoop","prev","clone","after","window"],"mappings":"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","file":"angular-soft-loop.min.js","sourcesContent":[";(function(angular) {\n\n\nvar ng = angular.module('softLoop', []);\n\nng.controller('SoftLoopController', [\n  '$rootScope',\n  function($rootScope) {\n    var\n      scopes = [],\n      lastDirtyWatchNull,\n      initialized = false;\n\n    this.phase = false;\n\n    this.init = function(scope) {\n      if (initialized) {\n        return;\n      }\n      initialized = true;\n\n      this.scopeDecorate(scope);\n\n      // Hack for null lastDirtyWatch\n      // @see https://github.com/angular/angular.js/blob/v1.2.10/src/ng/rootScope.js#L356\n      lastDirtyWatchNull = $rootScope.$watch();\n\n      scope.$on('$destroy', function() {\n        scopes.length = 0;\n        lastDirtyWatchNull();\n      });\n    };\n\n    this.loop = function() {\n      var\n        self = this;\n\n      this.phase = true;\n\n      scopes.forEach(function(scope) {\n        scope.$$softLoopWatchers.enable();\n      });\n\n      lastDirtyWatchNull();\n      $rootScope.$$postDigest(function() {\n\n        scopes.forEach(function(scope) {\n          scope.$$softLoopWatchers.disable();\n        });\n\n        self.phase = false;\n      });\n    };\n\n    this.scopeDecorate = function(scope) {\n      var\n        self = this;\n\n      scopes.unshift(scope);\n\n      scope.$softLoop = true;\n      scope.$$softLoopWatchers = [];\n\n      ['enable', 'disable', 'free'].forEach(function(name) {\n        scope.$$softLoopWatchers[ name ] = function() {\n          this.forEach(function(watcher) {\n            watcher[ name ]();\n          });\n        };\n      });\n\n      scope.$on('$destroy', function() {\n        scope.$$softLoopWatchers.free();\n        scope.$$softLoopWatchers.length = 0;\n        arrayRemove(scopes, scope);\n      });\n\n      scope.$newRegular = function(isolate) {\n        var\n          self = scope.$new(isolate);\n        if (self.$softLoop) {\n          self.$new = self.constructor.prototype.$new;\n          self.$watch = self.constructor.prototype.$watch;\n          self.$$softLoopWatchers.enable();\n          self.$$softLoopWatchers.free();\n          self.$$softLoopWatchers.length = 0;\n          self.$softLoop = false;\n        }\n        return self;\n      };\n\n      scope.$softLoopDigest = function() {\n        if (! $rootScope.$$phase) {\n          scope.$digest();\n        }\n        else if (! self.phase) {\n          self.loop();\n        }\n      };\n\n      scope.$apply = function() {\n        if (! self.phase) {\n          self.loop();\n        }\n        return this.constructor.prototype.$apply.apply(scope, arguments);\n      };\n\n      scope.$digest = function() {\n        if (! self.phase) {\n          self.loop();\n        }\n        return this.constructor.prototype.$digest.apply(scope, arguments);\n      };\n\n      scope.$new = function(isolate) {\n        var\n          childScope;\n\n        // @see https://github.com/angular/angular.js/blob/v1.2.10/src/ng/rootScope.js#L176\n        childScope =  this.constructor.prototype.$new.call(scope, isolate);\n        return self.scopeDecorate(childScope);\n      };\n\n      scope.$watch = function(watchExp, listener, objectEquality) {\n        var\n          watcher,\n          watcherCtrl,\n          enabled,\n          unwatch;\n\n        // @see https://github.com/angular/angular.js/blob/v1.2.10/src/ng/rootScope.js#L319\n        unwatch = this.constructor.prototype.$watch.call(\n          scope,\n          watchExp,\n          listener,\n          objectEquality\n       );\n        watcher = scope.$$watchers[0];\n        enabled = true;\n\n        watcherCtrl = {\n          enable : function() {\n            if (!enabled) {\n              scope.$$watchers.unshift(watcher);\n              enabled = true;\n            }\n          },\n          disable : function() {\n            if (enabled) {\n              arrayRemove(scope.$$watchers, watcher);\n              enabled = false;\n            }\n          },\n          destroy : function() {\n            enabled = false;\n            arrayRemove(scope.$$softLoopWatchers, watcherCtrl);\n            arrayRemove(scope.$$watchers, watcher);\n            unwatch && unwatch();\n            watcherCtrl && watcherCtrl.free && watcherCtrl.free();\n          },\n          free : function() {\n            delete this.enable;\n            delete this.disable;\n            delete this.destroy;\n            unwatch = watcher = watcherCtrl = undefined;\n          }\n        };\n\n        scope.$$postDigest(function() {\n          watcherCtrl && watcherCtrl.disable();\n        });\n\n        scope.$$softLoopWatchers.unshift(watcherCtrl);\n\n        return watcherCtrl.destroy;\n      };\n\n      return scope;\n    };\n\n    function arrayRemove(array, value) {\n      var index = array.indexOf(value);\n      if (index >= 0) {\n        array.splice(index, 1);\n      }\n      return value;\n    }\n\n  }\n]);\n\nng.directive('softLoop', [\n  '$controller',\n  function($controller) {\n    return {\n      transclude : 'element',\n      priority : 200,\n      terminal : true,\n      restrict : 'A',\n      compile : function(element, attrs, transclude) {\n        return function(scope, element) {\n          var\n            $scope,\n            self,\n            loop = false;\n\n          $scope = scope.$new();\n          self = $controller('SoftLoopController');\n\n          self.init($scope);\n\n          scope.$watch(\n            attrs.softLoop,\n            function(value, prev) {\n              if (value !== prev && !loop) {\n                loop = true;\n                self.loop();\n                $scope.$$postDigest(function() {\n                  loop = false;\n                });\n              }\n            }\n         );\n\n          transclude($scope, function(clone) {\n            element.after(clone);\n          });\n        }\n      }\n    }\n  }\n]);\n\nng.directive('softLoopArea', [\n  '$controller',\n  function($controller) {\n    return {\n      transclude : 'element',\n      priority : 200,\n      terminal : true,\n      restrict : 'A',\n      compile : function(element, attrs, transclude) {\n        return function(scope, element) {\n          var\n            $scope,\n            self,\n            initialized = false;\n\n          $scope = scope.$new();\n          self = $controller('SoftLoopController');\n\n          self.init($scope);\n\n          $scope.$$postDigest(function() {\n            initialized = true;\n          });\n\n          scope.$watch(function() {\n            if (!initialized || self.phase) {\n              return;\n            }\n            self.loop();\n          });\n\n          transclude($scope, function(clone) {\n            element.after(clone);\n          });\n        }\n      }\n    }\n  }\n]);\n\nng.directive('softLoopExclude', [\n  function() {\n    return {\n      transclude : 'element',\n      priority : 500,\n      terminal : true,\n      restrict : 'A',\n      compile : function(element, attrs, transclude) {\n        return function(scope, element) {\n          var\n            $scope;\n\n          $scope = scope.$softLoop\n            ? scope.$newRegular()\n            : scope.$new();\n\n          transclude($scope, function(clone) {\n            element.after(clone);\n          });\n        }\n      }\n    }\n  }\n]);\n\n})(window.angular);"],"sourceRoot":"/source/"}